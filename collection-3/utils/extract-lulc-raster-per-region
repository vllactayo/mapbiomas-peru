// Este script toma una región de interés y extrae la información LULC de la colección 2 para exportarlo en raster
var param = {
  years_viz_export: [2022], // Año de visualizacion en el mapa y exportacion
  nombre: "ROI", //especificar nombre del area
  drive_folder: "COL2-MBPERU",  // Folder en Drive donde se almacenará los vectores y estadísticas.
  years_stats_export: ee.List.sequence(1985, 2022, 1).getInfo()  // Años que se exportarán en las estadísticas.
}

 
//Región de Interés 
var roi = ee.FeatureCollection("projects/mapbiomas-raisg/DATOS_AUXILIARES/VECTORES/PERU/PEDRO/area_analisis_2024")


//Colección 2
var asset = 'projects/mapbiomas-raisg/MAPBIOMAS-PERU/COLECCION2/INTEGRACION/mapbiomas_peru_collection2_integration_v1'
var image = ee.Image(asset)
var image_mapbiomas = image.clip(roi)

//Paleta de colores
var palettes = require('users/mapbiomas/modules:Palettes.js');

var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

Map.addLayer(roi.style({fillColor: '00000000', color:'blue'}),{},
         param.nombre)
         

Map.centerObject(roi,8)        



// Exportar raster

for (var i = 0; i < param.years_viz_export.length; i++) {
    var year = param.years_viz_export[i];
    
    // Selecciona la imagen de clasificación para el año correspondiente.
    var img_mapbiomas = image_mapbiomas.select('classification_' + year);
    Map.addLayer(img_mapbiomas,vis,'clasification '+ year);

    // Exporta la imagen raster.
    Export.image.toDrive({
        image: img_mapbiomas,
        description: 'Raster_Export_' + param.nombre.replace(/ /g, "") + '_' + year,
        folder: param.drive_folder,
        fileNamePrefix: 'Raster_Export_' + param.nombre.replace(/ /g, "") + '_' + year,
        scale: 30,
        region: roi.geometry().bounds(),
        maxPixels: 1e12,
        fileFormat: 'GeoTIFF'
    });
}

/**
// Cálculo de estadísticas
*/

function setVersion(item) { return item.set('version', 1) }

var roi_raster = roi
    .map(setVersion)
    .reduceToImage(['version'], ee.Reducer.first());

var territory = roi_raster;

var mapbiomas = image.updateMask(territory.unmask())

var pixelArea = ee.Image.pixelArea().divide(1000000);

var geometry = roi.geometry().bounds();

var convert2table = function (obj) {

    obj = ee.Dictionary(obj);

    var territory = obj.get('territory');

    var classesAndAreas = ee.List(obj.get('groups'));

    var tableRows = classesAndAreas.map(
        function (classAndArea) {
            classAndArea = ee.Dictionary(classAndArea);

            var classId = classAndArea.get('class');
            var area = classAndArea.get('sum');

            var tableColumns = ee.Feature(null)
                .set('territory', territory)
                .set('class', classId)
                .set('area', area);

            return tableColumns;
        }
    );

    return ee.FeatureCollection(ee.List(tableRows));
};

var calculateArea = function (image, territory, geometry) {

    var reducer = ee.Reducer.sum().group(1, 'class').group(1, 'territory');

    var territotiesData = pixelArea.addBands(territory).addBands(image)
        .reduceRegion({
            reducer: reducer,
            geometry: geometry,
            scale: 30,
            maxPixels: 1e12
        });

    territotiesData = ee.List(territotiesData.get('groups'));

    var areas = territotiesData.map(convert2table);

    areas = ee.FeatureCollection(areas).flatten();

    return areas;
};

var areas = param.years_stats_export.map(
    function (year) {
        var image = mapbiomas.select('classification_' + year);

        var areas = calculateArea(image, territory, geometry);

        // set additional properties
        areas = areas.map(
            function (feature) {
                return feature.set('year', year);
            }
        );

        return areas;
    }
);

areas = ee.FeatureCollection(areas).flatten();

Export.table.toDrive({
    collection: areas,
    description: 'Estadisticas-'+ param.nombre.replace(/ /g, ""),  
    folder: param.drive_folder,
    fileNamePrefix: 'Estadisticas-'+ param.nombre.replace(/ /g, ""),  
    fileFormat: 'CSV'
});



